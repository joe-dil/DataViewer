<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
 <key>clang_version</key>
<string>Apple clang version 16.0.0 (clang-1600.0.26.6)</string>
 <key>diagnostics</key>
 <array>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>88</integer>
      <key>col</key><integer>9</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>88</integer>
         <key>col</key><integer>9</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>88</integer>
         <key>col</key><integer>44</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>4b1a35fd03eccb6b37b855edda285790</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>35</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>88</integer>
   <key>col</key><integer>9</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>88</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>89</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>89</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>89</integer>
         <key>col</key><integer>44</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>e0b5e9c35e66e231ff883fd98d411fc2</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>36</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>89</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>89</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>90</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>90</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>90</integer>
         <key>col</key><integer>52</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>c8baafdeb79e89e0570e7a3b19c80366</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>37</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>90</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>90</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>91</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>91</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>91</integer>
         <key>col</key><integer>52</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>5ef97eb347c9d1c5d85e969fb64e8d73</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>38</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>91</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>91</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>92</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>92</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>92</integer>
         <key>col</key><integer>52</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>e93811906f710b353f91fd380f433eb5</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>39</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>92</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>92</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>94</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>94</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>94</integer>
         <key>col</key><integer>46</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>1407aedcd82b3ca8a37ef6e28fb3994a</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>41</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>94</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>94</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>95</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>95</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>95</integer>
         <key>col</key><integer>62</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>a2596db669cfbc5c02e2e1c406c97b98</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>42</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>95</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>95</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>96</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>96</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>96</integer>
         <key>col</key><integer>53</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>bcb50fc9327942ff547a1482211b9cc7</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>43</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>96</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>96</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>97</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>97</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>97</integer>
         <key>col</key><integer>58</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>73f6d483a54f5286c9b7f6b738b12519</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>44</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>97</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>97</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>98</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>98</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>98</integer>
         <key>col</key><integer>57</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>70297c97c7a824053fd88ad514c312a4</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>45</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>98</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>98</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>99</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>99</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>99</integer>
         <key>col</key><integer>56</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>f0f6aeb417bbb6944122888019c0e5c8</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>46</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>99</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>99</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>101</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>101</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>101</integer>
         <key>col</key><integer>51</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>62819cefad714e2332313ed85a586f7f</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>48</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>101</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>101</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>102</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>102</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>102</integer>
         <key>col</key><integer>67</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>8da019dd7b60052eff9a6fbabe4c85a8</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>49</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>102</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>102</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>103</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>103</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>103</integer>
         <key>col</key><integer>63</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>c401c974ff987deb71615e5fbaa40d98</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>50</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>103</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>103</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>104</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>104</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>104</integer>
         <key>col</key><integer>58</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>e3616d3f55f4e9f44bd99777e6eb04ae</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>51</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>104</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>104</integer>
   </array>
  </dict>
  </dict>
  <dict>
   <key>path</key>
   <array>
    <dict>
     <key>kind</key><string>event</string>
     <key>location</key>
     <dict>
      <key>line</key><integer>106</integer>
      <key>col</key><integer>14</integer>
      <key>file</key><integer>0</integer>
     </dict>
     <key>ranges</key>
     <array>
       <array>
        <dict>
         <key>line</key><integer>106</integer>
         <key>col</key><integer>14</integer>
         <key>file</key><integer>0</integer>
        </dict>
        <dict>
         <key>line</key><integer>106</integer>
         <key>col</key><integer>64</integer>
         <key>file</key><integer>0</integer>
        </dict>
       </array>
     </array>
     <key>depth</key><integer>0</integer>
     <key>extended_message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
     <key>message</key>
     <string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
    </dict>
   </array>
   <key>description</key><string>Call to function &apos;sscanf&apos; is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as &apos;sscanf_s&apos; in case of C11</string>
   <key>category</key><string>Security</string>
   <key>type</key><string>Potential insecure memory buffer bounds restriction in call &apos;sscanf&apos;</string>
   <key>check_name</key><string>security.insecureAPI.DeprecatedOrUnsafeBufferHandling</string>
   <!-- This hash is experimental and going to change! -->
   <key>issue_hash_content_of_line_in_context</key><string>5650852096893c2841f2d20d144a7176</string>
  <key>issue_context_kind</key><string>function</string>
  <key>issue_context</key><string>config_load_from_file</string>
  <key>issue_hash_function_offset</key><string>53</string>
  <key>location</key>
  <dict>
   <key>line</key><integer>106</integer>
   <key>col</key><integer>14</integer>
   <key>file</key><integer>0</integer>
  </dict>
  <key>ExecutedLines</key>
  <dict>
   <key>0</key>
   <array>
    <integer>106</integer>
   </array>
  </dict>
  </dict>
 </array>
 <key>files</key>
 <array>
  <string>src/config.c</string>
 </array>
</dict>
</plist>
